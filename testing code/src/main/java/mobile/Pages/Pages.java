package mobile.Pages;

import io.appium.java_client.android.AndroidDriver;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;


public class Pages {


    /**
     * this is the driver which is used in interacting with the browser
     */
    private AndroidDriver driver;

    /**
     * this is the constructor of the class and it initializes all of its members using PageFactory class
     * @param driver : which is generated by selenium testcase
     */
    public Pages(AndroidDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }


    /**
     * this function is used to make the driver wait until a specific webElement disappears
     * @param webElement: this is the Web Element through which we will wait on
     * @param timeOutInSeconds: this is the timeout in seconds as explicit wait will terminate as waitTime passes this time
     */
    public void waitForWebElementToDisappear(WebElement webElement, int timeOutInSeconds){
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeOutInSeconds));
        wait.until(ExpectedConditions.invisibilityOf(webElement));

    }

    /**
     * this function is used to make the driver wait until a specific webElement appears
     * @param webElement: this is the Web Element through which we will wait on
     * @param timeOutInSeconds: this is the timeout in seconds as explicit wait will terminate as waitTime passes this time
     */
    public void waitForWebElementToAppear(WebElement webElement, int timeOutInSeconds){
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeOutInSeconds));
        wait.until(ExpectedConditions.visibilityOf(webElement));
    }


    /**
     * this function is used to make the driver wait until a findBy Element disappears
     * @param findBy: this is a locator through which we will wait on
     * @param timeOutInSeconds: this is the timeout in seconds as explicit wait will terminate as waitTime passes this time
     */
    public void waitByElementToDisappear(By findBy, int timeOutInSeconds){
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeOutInSeconds));
        wait.until(ExpectedConditions.invisibilityOfElementLocated(findBy));
    }

    /**
     * this function is used to make the driver wait until a findBy Element appears
     * @param findBy: this is a locator through which we will wait on
     * @param timeOutInSeconds: this is the timeout in seconds as explicit wait will terminate as waitTime passes this time
     */
    public void waitByElementToAppear(By findBy, int timeOutInSeconds){
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeOutInSeconds));
        wait.until(ExpectedConditions.invisibilityOfElementLocated(findBy));
    }

    /**
     * this is a function to cause the thread to sleep
     * @param timeOutInSeconds: this the time that will cause the thread to sleep
     * @throws InterruptedException: this is exception thrown by the Thread.sleep function
     */
    public void threadSleep(int timeOutInSeconds)  {
        try {
            Thread.sleep((timeOutInSeconds * 1000L));
        }catch (InterruptedException e){
            e.printStackTrace();
        }

    }

}
