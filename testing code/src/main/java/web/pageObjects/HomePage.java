package web.pageObjects;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import web.AbstractComponents.AbstractComponent;
import web.constants.PageConstants;

import java.util.List;

import static web.constants.PageConstants.EXPLICIT_TIMEOUT_SECONDS;

public class HomePage extends AbstractComponent {

    /**
     * this the driver that's used to to automate the tests
     */
    WebDriver driver;

    /**
     * these are the list of posts that are showing the home page
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    List<WebElement> posts;

    /**
     * this is the selector of comment button on a post
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    By commentButton;

    /**
     * this is the create post input in the home page
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    WebElement createPost;

    /**
     * this is the create community button
     */
    @FindBy(xpath = "//button[text()='create community']")
    WebElement createCommunityBtn;

    /**
     * this is the final create community button
     */
    @FindBy(xpath = "//button[text()='Create community']")
    WebElement createCommunityBtn2;

    /**
     * this is the input text through which we will take the name of the community
     */
    @FindBy(id = "name")
    WebElement communityNameInput;

    /**
     * this is the community type
     */
    @FindBy(xpath = "//input[@type='radio']")
    List<WebElement> communityTypeList;

    /**
     * this is the check button for NSFW content
     */
    @FindBy(id = "myCheck")
    WebElement isNSFWCheckButton;


    /**
     * this is the constructor of the class and it initializes all of its members using PageFactory class
     *
     * @param driver : which is generated by selenium testcase
     */
    public HomePage(WebDriver driver) {
        super(driver);
        this.driver = driver;
    }

    /**
     * this function is used to create a community
     * for community type:  - 0:public
     *                      - 1:Restricted
     *                      - 2:private
     */
    public CommunityPage createCommunity(String communityName, boolean isNSFW, int communityType){
        waitForWebElementToAppear(createCommunityBtn, EXPLICIT_TIMEOUT_SECONDS);
        createCommunityBtn.click();
        waitForWebElementToAppear(communityNameInput, EXPLICIT_TIMEOUT_SECONDS);
        communityNameInput.sendKeys(communityName);
        communityTypeList.get(communityType).click();

        if(isNSFW)
            isNSFWCheckButton.click();

        createCommunityBtn2.click();
        threadSleep(2);

        return new CommunityPage(driver);
    }


    /**
     * this methods clicks on one of the post to enter into it
     * @param postIndex: this is the index of the post in the home page
     * @return PostDetails: which is the object of view of the post details
     */
    public PostDetails checkPost(int postIndex){
        try {
            posts.get(postIndex).click();
            return new PostDetails(driver);
        }catch (Exception e){
            return null;
        }
    }

    /**
     * this methods visits a post with at least specific number of comments
     * @param commentsNum: the at least number needed for post to be visited
     * @return PostDetails: which is the object of view of the post details
     */
    public PostDetails checkPostWithAtLeastNumOfComments(int commentsNum){
        for (WebElement element : posts){
            if(Integer.parseInt(element.findElement(commentButton).getText()) >= commentsNum){
                element.click();
                return new PostDetails(driver);
            }
        }
        return null;
    }


}
