package web.pageObjects;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import web.AbstractComponents.AbstractComponent;
import web.constants.PageConstants;

import java.awt.*;
import java.awt.datatransfer.DataFlavor;
import java.util.List;

public class PostDetails extends AbstractComponent {

    /**
     * this is the webDriver through which we can run the tests
     */
    WebDriver driver;

    /**
     * this is the textbox through which we will input the comment
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    WebElement commentTextBox;

    /**
     * this is the button to press when making a comment
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    WebElement commentButton;

    /**
     * these is the comment text in the post comments
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    By comment;

    /**
     * these are people who made comments on a post
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    List<WebElement> commentPeople;

    /**
     * this is the button to share a post
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    WebElement shareButton;

    /**
     * this is sharing using copying the link
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    WebElement copyLinkBtn;

    /**
     * this is the button that's used to upvote the current post
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    WebElement upVotePostBtn;

    /**
     * this is the button that's used to downvote the current post
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    WebElement downVotePostBtn;

    /**
     * this is the list of buttons that's used to downvote a specific comment
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    By downVotesCommentsBtn;

    /**
     * this is the list of buttons that's used to upvote a specific comment
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    By upVotesCommentsBtn;

    /**
     * this is the text that holds the number of upvotes for a specific comment
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    By upVotesCommentText;

    /**
     * this is the text that holds the number of downvotes for a specific comment
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    By downVotesCommentText;

    /**
     * this is the button that we will have to click when we want to reply to someone
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    By replyButton;

    /**
     * this is the text input through which we will write our reply to someone
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    By replyTextInput;

    /**
     * this is the button through which we will post our reply
     */
    @FindBy(id = PageConstants.NULL_LOCATOR)
    By replyTextButton;

    /**
     * this is the constructor of the class and it initializes all of its members using PageFactory class
     *
     * @param driver : which is generated by selenium testcase
     */
    public PostDetails(WebDriver driver) {
        super(driver);
        this.driver = driver;
    }

    /**
     * this method is used to make a comment
     * @param comment: this is the string to be inserted as a comment
     */
    public void makeComment(String comment){
        commentTextBox.sendKeys(comment);
        commentButton.click();
    }

    /**
     * this method is used to reply to a random user on some random post
     * @param comment: this is the comment that we will reply as a reply
     * @param userName: this is the name of user whom we will reply to
     */
    public void replyToComment(String comment, String userName){
        int index = commentPeople.indexOf(userName);
        commentPeople.get(index).findElement(replyButton).click();
        commentPeople.get(index).findElement(replyTextInput).sendKeys(comment);
        commentPeople.get(index).findElement(replyTextButton).click();
        driver.navigate().refresh();
    }

    /**
     * this method gets the comment made by a specific user
     * @param userName: this is the name of the user who made this comment
     * @return String: the comment made by the user given as input
     */
    public String getCommentOfUser(String userName){
        int index = commentPeople.indexOf(userName);
        if(index != -1)
            return commentPeople.get(index).findElement(comment).getText();
        else
            return "";
    }

    /**
     * this function is to share a link and get that link
     * @return String: the link to be shared
     */
    public String shareLink(){
        shareButton.click();
        waitForWebElementToAppear(copyLinkBtn, 1);
        copyLinkBtn.click();
        try {
            return (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor); // extracting the text that was copied to the clipboard
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * this function returns the name of someone at specific position in the comments section
     * @param index: this is the index that we want the name of user at
     * @return String: the name of the username at the given index
     */
    public String getUserNameOfIndex(int index){
        return commentPeople.get(index).getText();
    }

    /**
     * this function is used to upvote a post
     */
    public void upVotePost(){
        upVotePostBtn.click();
        driver.navigate().refresh();
    }

    /**
     * this function is used to downvote a post
     */
    public void downVotePost(){
        downVotePostBtn.click();
        driver.navigate().refresh();
    }

    /**
     * this function is used to downvote a comment
     */
    public void downVoteComment(String userName){
        int index = commentPeople.indexOf(userName);
        commentPeople.get(index).findElement(downVotesCommentsBtn).click();
        driver.navigate().refresh();
    }

    /**
     * this function is used to upvote a comment
     */
    public void upVoteComment(String userName){
        int index = commentPeople.indexOf(userName);
        commentPeople.get(index).findElement(upVotesCommentText).click();
        driver.navigate().refresh();
    }

    /**
     * this methods the number of upvotes on a post
     * @return int: the number of upvotes on a post
     */
    public int getNumOfVotesPost(){
        return Integer.parseInt(upVotePostBtn.getText());
    }

    /**
     * this methods the number of upvotes on a comment
     * @return int: the number of upvotes on a comment
     */
    public int getNumOfVotesComment(String userName){
        int index = commentPeople.indexOf(userName);
        return Integer.parseInt(commentPeople.get(index).findElement(upVotesCommentText).getText());
    }


}
